# ---  Siconos ci templates ---
# 
# This file contains common definitions and templates for
# continuous integration job of siconos project.
#
# Usage :
# add in .gitlab-ci.yml :
# include: <path-to-this-file>/gitlab-ci-siconos-templates.yml

variables:
  # Default ctest model. Warning : overwritten if set in schedules variables (as we expect)
  ctest_build_model: Continuous
  # Path to dockerfiles (relative to siconos repo)
  docker_path: ci_gitlab/dockerfiles
  # Default tag for docker images
  docker_tag: latest
  # Default behavior regarding cdash submission
  cdash_submit: 0
  # Default path to siconos conf. files
  siconos_confs: ci_gitlab/siconos_confs
  # By default we allow builds to run in parallel, but certain
  # configurations may require non-parallel builds (cf. swig +
  # serialization requires too much memory)
  allow_parallel_build: 1
  GIT_DEPTH: 1
  #GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME



stages:
  # --- Docker build stage ---
  # The first stage contains jobs used to build
  # docker images 'ready to use' for a Siconos build/install.
  # Requirement for jobs in this stage :
  # - should build and push a docker image to siconos project registry
  # - should be allowed to failed (in order to avoid blocking of last stage jobs)
  # - should run only when commit message contains [docker build]
  # - use Dockerfile from ci_gitlab/dockerfiles/<image-name>
  #
  # Templates for these jobs : .docker-build (see below).
  - docker-build
  - docker-build-layer2
  - docker-build-layer3
  - docker-build-layer-doc
  
  # --- Build stage ---
  # jobs run on images generated in previous stage, available in siconos registry:
  # https://gricad-gitlab.univ-grenoble-alpes.fr/nonsmooth/siconos/container_registry
  # - configure, build Siconos
  # - run tests
  # - submit to cdash
  - configure
  - build
  - test
  - install
  # Templates for these jobs : .siconos-build (see below).
  # --- Doc stages ---
  # Build documentation
  - doc-build
  - doc-deploy

# --- Templates definitions ---
  
# -- Template for docker-build jobs --
# - should build and push a docker image to siconos project registry
#   image name : $CI_REGISTRY_IMAGE/$IMAGE_NAME
# - should be allowed to failed (in order to avoid blocking of last stage jobs)
# - should run only when commit message contains [docker build]
# - use Dockerfile from ci_gitlab/dockerfiles/<IMAGE_NAME>
# - will be tagged <IMAGE_NAME>:<docker_tag>. The default tag is latest.
# Warning : this kind of job can only run on 'privileged' runners.
.docker-build:
  #image: docker:stable
  #services:
  #  - docker:18-dind
  #tags:
  #  - priv
  #stage: docker-build
  #script:
  #  - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  #  - docker build -t $CI_REGISTRY_IMAGE/$IMAGE_NAME:$CI_COMMIT_SHORT_SHA $docker_path/$IMAGE_NAME > /dev/null
  #  - docker tag $CI_REGISTRY_IMAGE/$IMAGE_NAME:$CI_COMMIT_SHORT_SHA $CI_REGISTRY_IMAGE/$IMAGE_NAME:$docker_tag
  #  - docker push $CI_REGISTRY_IMAGE/$IMAGE_NAME:$docker_tag
  #only:
  #  variables: # Run this job only when commit message starts with [docker-build]
  #    - $CI_COMMIT_MESSAGE =~ /^\[docker-build\].*/i      
  #allow_failure: true
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  #variables:
    #GIT_STRATEGY: none
  stage: docker-build
  script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $docker_path/$IMAGE_NAME/Dockerfile --destination $CI_REGISTRY_IMAGE/$IMAGE_NAME:latest
  only:
    variables: # Run this job only when commit message starts with [docker-build]
      - $CI_COMMIT_MESSAGE =~ /^\[docker-build\].*/i      


# -- Template for siconos build-test-install jobs --
# - Pull an image (possibly from siconos registry)
#   named  IMAGE_NAME
# - Run for all branches and for all push
#.siconos-build:
#  image: $IMAGE_NAME
#  stage: build
#  script:
#    - "sh ci_gitlab/install_siconos.sh $user_file" 


# -- Template for siconos build-test-install jobs --
# - Pull an image (possibly from siconos registry)
#   named  IMAGE_NAME
# - Run for all branches and for all push
.siconos-ctest:
  image: $IMAGE_NAME
  script:
    - echo $CI_COMMIT_REF_NAME
    - date
    - env
    - du -sh
    - "sh ci_gitlab/ctest_siconos.sh $ctest_mode $user_file" 
    #exclude:
    #  - $CI_PROJECT_DIR/.*git
  
# -- Template for siconos build-test-install jobs --
# - Pull an image (possibly from siconos registry)
#   named  IMAGE_NAME
# - Run for all branches and for all push
.siconos-configure:
  extends: .siconos-ctest
  variables:
    #GIT_STRATEGY: clone
    ctest_mode: Configure
  stage: configure
  #allow_failure: true
  artifacts:
    paths:
      - build
    expire_in: 2 days  

# -- Template for siconos build-test-install jobs --
# - Pull an image (possibly from siconos registry)
#   named  IMAGE_NAME
# - Run for all branches and for all push
.siconos-build:
  extends: .siconos-ctest
  variables:
    ctest_mode: Build
    #GIT_STRATEGY: none
  stage: build
  #allow_failure: true
  artifacts:
    paths:
      - build
    expire_in: 2 days  

# -- Template for siconos build-test-install jobs --
# - Pull an image (possibly from siconos registry)
#   named  IMAGE_NAME
# - Run for all branches and for all push
.siconos-test:
  extends: .siconos-ctest
  variables:
    ctest_mode: Test
    #GIT_STRATEGY: none
  stage: test

# -- Template for siconos build-test-install jobs --
# - Pull an image (possibly from siconos registry)
#   named  IMAGE_NAME
# - Run for all branches and for all push
.siconos-full:
  extends: .siconos-ctest
  variables:
    ctest_mode: all
    #GIT_STRATEGY: clone
  stage: configure
  artifacts:
    paths:
      - build
    expire_in: 2 days  


  # Installs siconos and generates a docker image with a full/uptodate install of siconos
# Use output (build from artifacts) from a previous job (e.g. debian:build or similar)
.siconos-install:
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  variables:
    #GIT_STRATEGY: none
    #REG_NAME: $CI_REGISTRY_IMAGE
  stage: install
  script:
    - cat $CI_PROJECT_DIR/ci_gitlab/dockerfiles/install_template| sed -e "s|IMAGENAME|$IMAGE_NAME|g" >> build/Dockerfile
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/build/Dockerfile --destination $CI_REGISTRY_IMAGE/$siconos_docker_name:$CI_COMMIT_SHORT_SHA --destination $CI_REGISTRY_IMAGE/$siconos_docker_name:latest
